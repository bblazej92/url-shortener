from http.client import CREATED

from app.main import main
from app.main.schema import RegisterUrlSchema, ShortUrlSchema
from app.models import ShortUrl
from flask import jsonify, request, logging
from flask import make_response
from flask import render_template
from flask import url_for
from flask_login import current_user, login_required
from mongoengine import DoesNotExist, MultipleObjectsReturned
from utils.exceptions import SlugAlreadyExistsException
from utils.helpers import generate_random_slug
from werkzeug.exceptions import NotFound, InternalServerError, Unauthorized

log = logging.getLogger(__name__)


@main.route('/')
def index():
    return render_template('index.html')


@main.route('/v1/generate_short_url', methods=['POST'])
@login_required
def generate_short_url():
    """
    .. :quickref: ShortUrl; Generate short url.

    Generate short url for original url given by user using custom slug if specified.

    :reqheader Accept: application/json
    :<json string original_url: url of website to be shorten
    :<json string slug: (optional) slug to use in shortened url

    :resheader Content-Type: application/json
    :>json string short_url: short url which redirects to original url

    :status 201: ShortUrl created
    :status 500: slug already exists in db
    """
    url_data = RegisterUrlSchema().load(request.get_json()).data
    url_data['user_id'] = str(current_user.id)
    short_url_obj = ShortUrl(**url_data)

    if 'slug' in url_data:
        if ShortUrl.objects(slug=short_url_obj.slug):
            log.error('Slug already exists in database')
            raise SlugAlreadyExistsException()
    else:
        slug = generate_random_slug(length=6)
        while ShortUrl.objects(slug=slug):
            log.warning('Slug duplicate detected! - {}'.format(slug))
            slug = generate_random_slug(length=6)
        short_url_obj.slug = slug
    short_url_obj.save()
    short_url = url_for('main.get_url', slug=short_url_obj.slug, _external=True)
    return make_response(jsonify(dict(short_url=short_url)), CREATED)


@main.route('/<slug>', methods=['GET'])
def get_url(slug):
    """
    .. :quickref: ShortUrl; Get original url.

    Return original url for given slug.

    :param slug: short string which was created during generation short url

    :resheader Content-Type: application/json
    :>json string original_url: url for which short url was created

    :status 200: ShortUrl for given slug found
    :status 404: ShortUrl for given slug not found
    :status 500: multiple ShortUrls for given slug found
    """
    try:
        short_link = ShortUrl.objects.get(slug=slug)
        short_link.access_counter += 1
        short_link.save()
        return jsonify(dict(original_url=short_link.original_url))
    except DoesNotExist as e:
        log.error(e)
        raise NotFound()
    except MultipleObjectsReturned as e:
        log.error(e)
        raise InternalServerError()


@main.route('/v1/url_info/<slug>', methods=['GET'])
@login_required
def get_url_info(slug):
    """
    .. :quickref: ShortUrl; Get info about short url.

    Return details about short url by slug.

    :param slug: short string which was created during generation short url

    :resheader Content-Type: application/json
    :>json string original_url: url for which short url was created
    :>json date created: time when short url was generated.
    :>json int access_counter: number of times short url has been accessed

    :status 200: ShortUrl for given slug found
    :status 404: ShortUrl for given slug not found
    :status 500: multiple ShortUrls for given slug found
    """
    try:
        short_link = ShortUrl.objects.get(slug=slug)
        if short_link.user_id != str(current_user.id):
            raise Unauthorized()
        return jsonify(ShortUrlSchema(exclude=('slug',)).dump(short_link).data)
    except DoesNotExist as e:
        log.error(e)
        raise NotFound()
    except MultipleObjectsReturned as e:
        log.error(e)
        raise InternalServerError()


@main.route('/v1/list_urls', methods=['GET'])
@login_required
def get_list_of_user_urls():
    """
    .. :quickref: ShortUrl; Get info about user`s short urls.

    Return details about short urls generated by current user.

    :resheader Content-Type: application/json
    :>json list[url_info] URLs: list of dicts with details about short url

    :status 200: query to database succeeded
    """
    short_links = ShortUrl.objects(user_id=str(current_user.id))
    return jsonify({'URLs': ShortUrlSchema(many=True).dump(short_links).data})
